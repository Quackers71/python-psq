Files and Resource Management

open() # open a file
# file: path to file (required)
# mode: read/write/append, binary/text
# encoding: text encoding

* Text File Access
# < encode = write()
# > decode = read()

https://docs.python.org/3/library/codecs.html#standard-encodings

Files as Iterators
# Using files.py - In the Terminal run :
:   python files.py wasteland.txt


Managing Files with Try..Finally
# Using recaman.py - In the Terminal run :
:   python recaman.py recaman.dat 1000

# Using series.py - In the Terminal run :
:   python series.py recaman.dat

Context Managers and with-blocks

f = open()
#  work work work
f.close()

with-block # resource cleanup with context-managers

Moments of Zen

* Beautiful is better than ugly
- Sugary syntax
- fewer defects attained through
- sweet fidelity
    with EXPR as VAR:
        BLOCK

Binary files
* Device independent bitmaps

Bitwise Operators
Fractal images

# Using bmp.py & fractal.py - In the Terminal run :
:
>>> import fractal
>>> pixels = fractal.mandelbrot(448, 256)
>>> print(pixels)

>>> import bmp
>>> bmp.write_grayscale('mandel.bmp', pixels)
>>> ^D
$ open mandel.bmp

Reading Binary Files

# Using bmp.py & mandel.bmp - In the Terminal run :
:
>>> import bmp
>>> bmp.dimensions('mandel.bmp')
(448, 256)
>>>

File like Objects

* loosely-defined set of behaviors for things that act like files
# If it looks like a file and reads like a file, then it is a file.

