Files and Resource Management

open() # open a file
# file: path to file (required)
# mode: read/write/append, binary/text
# encoding: text encoding

* Text File Access
# < encode = write()
# > decode = read()

https://docs.python.org/3/library/codecs.html#standard-encodings

Files as Iterators
# Using files.py - In the Terminal run :
:   python files.py wasteland.txt


Managing Files with Try..Finally
# Using recaman.py - In the Terminal run :
:   python recaman.py recaman.dat 1000

# Using series.py - In the Terminal run :
:   python series.py recaman.dat

Context Managers and with-blocks

f = open()
#  work work work
f.close()

with-block # resource cleanup with context-managers

Moments of Zen

* Beautiful is better than ugly
- Sugary syntax
- fewer defects attained through
- sweet fidelity
    with EXPR as VAR:
        BLOCK

Binary files
* Device independent bitmaps

Bitwise Operators
Fractal images

# Using bmp.py & fractal.py - In the Terminal run :
:
>>> import fractal
>>> pixels = fractal.mandelbrot(448, 256)
>>> print(pixels)

>>> import bmp
>>> bmp.write_grayscale('mandel.bmp', pixels)
>>> ^D
$ open mandel.bmp

Reading Binary Files

# Using bmp.py & mandel.bmp - In the Terminal run :
:
>>> import bmp
>>> bmp.dimensions('mandel.bmp')
(448, 256)
>>>

File like Objects

* loosely-defined set of behaviors for things that act like files
# If it looks like a file and reads like a file, then it is a file.

Closing with Context Managers

# Using fridge.py - In the Terminal run :
:
>>> from fridge import raid
>>> raid('bacon')
Open fridge door.
Finding bacon...
Taking bacon
Close fridge door.
>>> raid('deep fried pizza')
Open fridge door.  # ***** NOT GOOD *****
Finding deep fried pizza...
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "C:\Users\***\Desktop\python-psq\pspyfundamentals\fridge.py", line 22, in raid
    r.take(food)
  File "C:\Users\***\Desktop\python-psq\pspyfundamentals\fridge.py", line 12, in take
    raise RuntimeError("Health warning!")
RuntimeError: Health warning!
>>>

File and resource management Summary

* Files are opened using the built-in 'open()' function which accepts a file mode to
  control read/write/append behavior and whether the file is to be treated as raw
  binary or encoded text data
* For text data you should specify a text encoding
* Text files deal with string objects and perform universal newline translation and
  string encoding
* Binary files deal with 'bytes' objects with no newline translation or encoding
* When writing files, it's our responsibility to provide newline characters for line
  breaks
* Files should always be closed after use
* Files provide various line-oriented methods for reading, and are also iterators which
  yield line by line
* Files are context managers and the with-statement can be used with context
  managers to ensure that clean up operations, such as closing files, are performed
* The notion of file-like-objects is loosely defined, but very useful in practice
  - Exercise EAFP to make the most of them
* Context managers aren't restricted to file-like-objects.  We can use tools in the
  'contextlib' standard library module, such as 'closing()' wrapper to create our
  own context managers

* 'help()' can be used on instance objects, not just types
* Python supports bitwise operators &, | and left- and right-shifts
