Comprehensions, iterables and generators

* Types comprehensions
    * list comprehensions
    * set comprehensions
    * dictionary comprehensions
-       Style!
-   * declarative
-   * functional
-       * readable
-       * expressive
-       * effective


* Iteration protocols

* - Iterable protocol
  - Iterable objects can be passed to the built-in
    iter() function to get an iterator.

  iterator = iter(iterable)

* - Iterator protocol
  - Iterator objects can be passed to the built-in
    next() function to fetch the next item.

  item = next(iterator)

Generators in Python (Generator Functions)

* Specify iterable sequences
* - all generators are iterators

* Are lazy evaluated
* - the next value in the sequence is computed on demand

* Can model infinite sequences
* - such as data streams with no definite end

* Are composible into pipelines
* - for natural stream processing

Stateful generators
* Generators resume execution
* Can maintain state in local variables
* Complex control flow
* Lazy evaluation

e.g.

def take(count, iterable):
    "Take first count elements"
    counter = 0
    for item in iterable:
        if counter == count:
            return
           counter += 1
           yield item

