Comprehensions, iterables and generators

* Types comprehensions
    * list comprehensions
    * set comprehensions
    * dictionary comprehensions
-       Style!
-   * declarative
-   * functional
-       * readable
-       * expressive
-       * effective


* Iteration protocols

* - Iterable protocol
  - Iterable objects can be passed to the built-in
    iter() function to get an iterator.

  iterator = iter(iterable)

* - Iterator protocol
  - Iterator objects can be passed to the built-in
    next() function to fetch the next item.

  item = next(iterator)

Generators in Python (Generator Functions)

* Specify iterable sequences
* - all generators are iterators

* Are lazy evaluated
* - the next value in the sequence is computed on demand

* Can model infinite sequences
* - such as data streams with no definite end

* Are composible into pipelines
* - for natural stream processing

Stateful generators
* Generators resume execution
* Can maintain state in local variables
* Complex control flow
* Lazy evaluation

e.g.

def take(count, iterable):
    "Take first count elements"
    counter = 0
    for item in iterable:
        if counter == count:
            return
           counter += 1
           yield item

Laziness and the Infinite

* Just in Time Computation
* Infinite (or large) sequences
* sensor readings
* mathematical series
* massive files

Generator comprehensions

* Similar syntax to list comprehensions
* Create a generator object
* Concise
* Lazy evaluation

Iteration Tools "Batteries Included"
https://docs.python.org/3/library/itertools.html

Comprehensions, Generators & iterables Summary

Comprehensions
* Comprehensions are a concise syntax for describing lists,
  sets and dictionaries
* Comprehensions operate on an iterable source object and
  apply an optional predicate filter and a mandatory
  expression, both of which are usually in terms of the
  current item.
* Iterables are objects over which we can iterate item by item.
* We retrieve an iterator from an iterable object using
  the built-in 'iter()' function.
* Iterators produce items one-by-one from the underlying
  iterable series each time they are passed to the built-in
  'next()'' function.

Generators
* Generator functions allow us to describe series using
  imperative code.
* Generator functions contain at least one use of the 'yield'
  keyword.
* Generators are iterators.  When advanced with 'next()' the
  generator starts or resumes execution up to and including
  the next 'yield'.
* Each call to a generator function creates a new generator
  object.
* Generators can maintain explicit state in local variables
  between iterations.
* Generators are lazy, and so can model infinite series of
  data.
* Generator expressions have a similar syntactic form to list
  comprehensions and allow for a more declarative and concise
  way of creating generator objects.

* Iteration tools
* - Built-ins such as
    - sum()
    - any()
    - zip()
    - all()
    - min()
    - max()
    - enumerate()
* - Standard library 'itertools' module
    - chain()
    - islice()
    - count()
    - *many more!
