Classes in Python

* You can get a long way with Python's built-in scalar and
  'collections' types.
* But when they're not right for the job, you can use classes
  to create custom types.

- *Structure and Behavior
* Classes define the structure and behavior of objects.
* An object's class controls its initialization.

- *Classes are a Tool
* Classes make complex problems tractable.
* Classes can make simple solutions overly complex.
  -* "Python lets you find the right balance
      with OOP and Classes."

Defining Classes

* By convention, class names use CamelCase

Methods

* Method - A function defined within a class
* Instance methods - functions which can be called on objects
* self - the first argument to all instance methods

Initializers

* __init__() instance method for initializing new objects
* 'self' s similar to 'this' in C++ or Java.
- *Why _number?
    - 1. Avoid name clash with number()
    - 2. By convention, implementation details start with
         underscore

Class Invariants

* Truths about an object that endure for its lifetime

# Use the below in the Python Console with airtravel.py

Python 3.7.1 (v3.7.1:260ec2c36a, Oct 20 2018, 14:05:16) [MSC v.1915 32 bit (Intel)] on win32
from airtravel import Flight
f = Flight("SN060")
f = Flight("060")
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "C:/Users/****/Desktop/python-psq/pspyfundamentals/classes\airtravel.py", line 8, in __init__
    raise ValueError("No airline code in'{}'".format(number))
ValueError: No airline code in'060'
f = Flight("sn060")
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "C:/Users/****/Desktop/python-psq/pspyfundamentals/classes\airtravel.py", line 11, in __init__
    raise ValueError("Invalid airline code '{}'".format(number))
ValueError: Invalid airline code 'sn060'
f = Flight("SNabcd")
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "C:/Users/****/Desktop/python-psq/pspyfundamentals/classes\airtravel.py", line 14, in __init__
    raise ValueError("Invalid route number '{}'".format(number))
ValueError: Invalid route number 'SNabcd'
f = Flight("SN12345")
Traceback (most recent call last):
  File "<input>", line 1, in <module>
  File "C:/Users/****/Desktop/python-psq/pspyfundamentals/classes\airtravel.py", line 14, in __init__
    raise ValueError("Invalid route number '{}'".format(number))
ValueError: Invalid route number 'SN12345'



# Use the below in the Python Console with airtravel.py

from airtravel import *
a = Aircraft("G-EUPT", "Airbus A319", num_rows=22, num_seats_per_row=6)
a.registration()
'G-EUPT'
a.model()
'Airbus A319'
a.seating_plan()
(range(1, 223), 'ABCDEF')


Collaborating Classes

* Law of Demeter
-* The 'Law of Demeter' is an Object Oriented Design Principle that says you
   should never call Methods you receive from other calls.
   'Only talk to your friends'

# Again use the below in the Python Console
from airtravel import *
f = Flight("BA758", Aircraft("G-EUPT", "Airbus A319", num_rows=22, num_seats_per_row=6))
f.aircraft_model()

Moment of Zen

* Complex is better than Complicated
-* Many moving parts Combined in a clever box
   Are now one good tool

Example: Booking Seats

# Again use the below in the Python Console

from airtravel import *
f = Flight("BA758", Aircraft("G-EUPT", "Airbus A319", num_rows=22, num_seats_per_row=6))
f.aircraft_model()

from pprint import pprint as pp
pp(f._seating)

# Method added for allocate_seat

# Again use the below in the Python Console

from airtravel import *
from pprint import pprint as pp
f = Flight("BA758", Aircraft("G-EUPT", "Airbus A319", num_rows=22, num_seats_per_row=6))
f.allocate_seat('12A', 'Guido Van Rossum')
f.allocate_seat('12A', 'Rasmus Lerdof')

f.allocate_seat('15F', 'Kylie Minogue')
f.allocate_seat('15E', 'Jason Donovan')
f.allocate_seat('E27', 'Bob Monkhouse')

f.allocate_seat('1C', 'John McCarthy')
f.allocate_seat('1D', 'Richard Hickey')
f.allocate_seat('dD', 'Larry Wall')

pp(f._seating)

Defining Implementation Details

# Again use the below in the Python Console

from airtravel import make_flight
f = make_flight()
f
f.relocate_passenger('12A', '15D')
from pprint import pprint as pp
pp(f._seating)

# Added the Method: num_available_seats
# Again use the below in the Python Console

from airtravel import make_flight
f = make_flight()
f.num_available_seats()
6 * 22 - 5 = 127

OO with Function Objects

# New requirement: Boarding Card Printer
# Don't feel compelled to create classes without
  good reason.

# Again use the below in the Python Console

from airtravel import console_card_printer, make_flight
f = make_flight()
f.make_boarding_cards(console_card_printer)

+-------------------------------------------------------------------------+
+                                                                         |
| Name: Anders Hejlsberg  Flight: BA758  Seat: 15E  Aircraft: Airbus A319 |
+                                                                         |
+-------------------------------------------------------------------------+
+--------------------------------------------------------------------------+
+                                                                          |
| Name: Bjarne Stroustrup  Flight: BA758  Seat: 15F  Aircraft: Airbus A319 |
+                                                                          |
+--------------------------------------------------------------------------+
+-------------------------------------------------------------------------+
+                                                                         |
| Name: Guido van Rossum  Flight: BA758  Seat: 12A  Aircraft: Airbus A319 |
+                                                                         |
+-------------------------------------------------------------------------+
+---------------------------------------------------------------------+
+                                                                     |
| Name: John McCarthy  Flight: BA758  Seat: 1C  Aircraft: Airbus A319 |
+                                                                     |
+---------------------------------------------------------------------+
+----------------------------------------------------------------------+
+                                                                      |
| Name: Richard Hickey  Flight: BA758  Seat: 1D  Aircraft: Airbus A319 |
+                                                                      |
+----------------------------------------------------------------------+

Polymorphism

* Using objects of different types through a common interface
# The card printer was polymorphic
# Polymorphism is achieved through :
Duck Typing "The Duck Test":
"When I see a bird that walks like a duck and swims like a duck
and quacks like a duck, I call that bird a duck."
- James Whitcomb Riley

# An objects fitness for purpose is determined at the time of use.
  i.e. at runtime

# Again use the below in the Python Console

from airtravel import *
f, g = make_flights()
f.aircraft_model()
'Airbus A319'
g.aircraft_model()
'Boeing 777'
f.num_available_seats()
127
g.num_available_seats()
491
